# pdf_reporter.py
from __future__ import annotations
from datetime import datetime
from typing import Any, Dict, List, Optional
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet
from reportlab.lib import colors
from reportlab.lib.units import mm
from reportlab.pdfbase.pdfmetrics import stringWidth
import os


REQUIRED_KEYS = {"risk_score", "risk_level", "violations", "recommendations", "citations"}

PAGE_SIZE = A4
MARGINS = (24*mm, 24*mm, 24*mm, 24*mm)  # left, right, top, bottom

COLOR_TEXT = colors.HexColor("#111111")
SEMAFORO = {"low": colors.HexColor("#2E7D32"),
            "medium": colors.HexColor("#F9A825"),
            "high": colors.HexColor("#C62828")}

_styles = getSampleStyleSheet()
Title = ParagraphStyle("Title", parent=_styles["Heading1"], fontName="Helvetica-Bold",
                       fontSize=22, textColor=COLOR_TEXT, alignment=1, spaceAfter=8)
H2 = ParagraphStyle("H2", parent=_styles["Heading2"], fontName="Helvetica-Bold",
                    fontSize=14, textColor=COLOR_TEXT, spaceBefore=10, spaceAfter=6)
Body = ParagraphStyle("Body", parent=_styles["BodyText"], fontName="Helvetica",
                      fontSize=10.5, leading=13, textColor=COLOR_TEXT, spaceAfter=4)
Small = ParagraphStyle("Small", parent=Body, fontSize=9.5, leading=12)

def _footer(canvas, doc):
    canvas.saveState()
    y = 12 * mm
    canvas.setFont("Helvetica", 9)
    canvas.setFillColor(COLOR_TEXT)
    # sinistra: Page X
    canvas.drawString(MARGINS[0], y, f"Page {canvas.getPageNumber()}")
    # centro: Date
    center_txt = f"Date: {getattr(doc, 'report_date_str', datetime.utcnow().strftime('%d %b %Y'))}"
    w = stringWidth(center_txt, "Helvetica", 9)
    canvas.drawString((PAGE_SIZE[0]-w)/2, y, center_txt)
    # destra: Generated by Lexie
    right_txt = "Generated by Lexie"
    rw = stringWidth(right_txt, "Helvetica", 9)
    canvas.drawString(PAGE_SIZE[0]-MARGINS[1]-rw, y, right_txt)
    canvas.restoreState()

def _risk_row(score: int, level: str) -> Table:
    lvl = (level or "low").lower()
    col = SEMAFORO.get(lvl, colors.HexColor("#BDBDBD"))
    # testo: bianco tranne su giallo (contrast)
    text_col = COLOR_TEXT if lvl == "medium" else colors.white

    cells = [[
        Paragraph(f"<b>Risk Score:</b> {int(score)}/100", Body),
        Paragraph(f"<b>Risk Level:</b> {lvl.upper()}", Body)
    ]]
    t = Table(cells, colWidths=[70*mm, 70*mm])
    t.setStyle(TableStyle([
        ("BOX", (0,0), (-1,-1), 0.75, col),
        ("INNERGRID", (0,0), (-1,-1), 0.5, col),
        ("BACKGROUND", (0,0), (-1,0), col),          # tutta la riga colorata
        ("TEXTCOLOR", (0,0), (-1,0), text_col),      # testo leggibile
        ("LEFTPADDING", (0,0), (-1,-1), 6),
        ("RIGHTPADDING", (0,0), (-1,-1), 6),
        ("TOPPADDING", (0,0), (-1,-1), 4),
        ("BOTTOMPADDING", (0,0), (-1,-1), 4),
    ]))
    return t

def _first_citation(v: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    if v.get("citation"): return v["citation"]
    cites = v.get("citations") or []
    return cites[0] if cites else None

def _norm_recs(recs):
    if isinstance(recs, dict): return recs
    if isinstance(recs, list): return {"General": recs}  # non "Recommendations"
    return {}
    
def _unwrap(p: Dict[str, Any]) -> Dict[str, Any]:
    r = p.get("result")
    return r if isinstance(r, dict) else p


def generate_report(payload: Dict[str, Any], out_path: str) -> str:
    data = _unwrap(payload)
    payload = data  # usa sempre 'payload'

    # --- meta ---
    title    = payload.get("title") or "Lexie — Privacy & AI Compliance Risk Report"
    date_str = payload.get("date_str") or datetime.utcnow().strftime("%d %b %Y")
    score    = int(payload.get("risk_score") or 0)
    level    = (payload.get("risk_level") or "low").lower()
    summary = (payload.get("summary") or "").strip()
    violations = payload.get("violations") or []
    recs       = _norm_recs(payload.get("recommendations"))
    cites      = payload.get("citations") or []

    src = (payload.get("document_name")
           or payload.get("document_path")
           or payload.get("analyzed_file")
           or "").strip()
    label = f"Analyzed file: <b>{os.path.basename(src)}</b>" if src else "Analyzed input: <b>Free text</b>"

    # --- story ---
    story: List = []
    story.append(Paragraph(title, Title))
    story.append(Spacer(1, 6))
    story.append(Paragraph(f"{label} · Date: <b>{date_str}</b>", Body))
    story.append(Spacer(1, 8))
    story.append(_risk_row(score, level))
    story.append(Spacer(1, 8))

    # --- summary ---
    story.append(Paragraph("Executive Summary", H2))
    if summary:
        story.append(Paragraph(summary, Body))
    story.append(Spacer(1, 6))

    # --- violations ---
    vio_n = len(violations)
    story.append(Paragraph(f"Violations ({vio_n})", H2))
    if vio_n == 0:
        story.append(Paragraph("No explicit violations detected.", Body))
    else:
        for v in violations:
            law = v.get("law", "-")
            art = v.get("article", "-")
            ttl = v.get("title", "-")
            reason = v.get("reason", "-")

            story.append(Paragraph(f"<b>{law} — {art} · {ttl}</b>", Body))
            story.append(Paragraph(reason, Body))

            c = _first_citation(v)
            if c and c.get("page") not in (None, "", "?"):
                story.append(Paragraph(
                    f"(Source: {c.get('source','-')} p. {c.get('page')}, id: {c.get('id','-')})",
                    Small
                ))
            story.append(Spacer(1, 4))

    # --- recommendations (opzionale, lascia com'è) ---
    if recs:
        story.append(Paragraph("Recommendations", H2))
        order = ["GDPR", "AI Act"]
        remaining = [k for k in recs.keys() if k not in order]
        for section in order + remaining:
            items = recs.get(section, [])
            if not items:
                continue
            story.append(Paragraph(section, ParagraphStyle("Sec", parent=H2, fontSize=12)))
            for r in items[:6]:
                story.append(Paragraph(f"• {r}", Body))
            story.append(Spacer(1, 4))

    # --- audit citations (lascia com’è se già presente) ---
    if cites:
        story.append(Spacer(1, 6))
        story.append(Paragraph("Citations (Audit)", H2))
        rows = [["Law", "Page", "ID"]] + [
            [str(c.get("source","-")), str(c.get("page","-")), str(c.get("id","-"))] for c in cites
        ]
        t = Table(rows, colWidths=[35*mm, 20*mm, None])
        t.setStyle(TableStyle([
            ("BACKGROUND", (0,0), (-1,0), colors.HexColor("#EAEAEA")),
            ("BOX", (0,0), (-1,-1), 0.5, colors.HexColor("#BDBDBD")),
            ("INNERGRID", (0,0), (-1,-1), 0.5, colors.HexColor("#BDBDBD")),
            ("ALIGN", (1,1), (1,-1), "CENTER"),
        ]))
        story.append(t)

    # --- build ---
    doc = SimpleDocTemplate(
        out_path, pagesize=PAGE_SIZE,
        leftMargin=MARGINS[0], rightMargin=MARGINS[1],
        topMargin=MARGINS[2], bottomMargin=MARGINS[3],
        title="Lexie — Privacy & AI Compliance Risk Report",
        author="Lexie"
    )
    doc.report_date_str = date_str
    doc.build(story, onFirstPage=_footer, onLaterPages=_footer)
    return out_path


if __name__ == "__main__":
    # Esempio rapido
    demo = {
        "analyzed_file": "(free text)",
        "date_str": datetime.utcnow().strftime("%d %b %Y"),
        "risk_score": 0,
        "risk_level": "low",
        "summary": "No risk signals in the provided text.",
        "violations": [],
        "recommendations": ["Ensure clear public communication of data practices."],
        "citations": []
    }
    import os; os.makedirs("runtime/outputs", exist_ok=True)
    print("Saved:", generate_report(demo, "runtime/outputs/report_demo.pdf"))

def load_result(json_path: str | Path) -> Dict[str, Any]:
    p = Path(json_path)
    data = json.loads(p.read_text(encoding="utf-8"))

    missing = REQUIRED_KEYS - set(data.keys())
    if missing:
        raise ValueError(f"JSON mancante di campi: {sorted(missing)}")

    meta = data.get("meta", {})
    file_name = meta.get("document_name") or data.get("document_name", "N/A")
    date_str  = meta.get("date") or data.get("date", "N/A")

    # normalizzazione minima
    result = {
        "title": "Lexie — Privacy & AI Compliance Risk Report",
        "file_name": file_name,
        "date": date_str,
        "risk_score": int(data["risk_score"]),
        "risk_level": str(data["risk_level"]).upper(),  # LOW|MEDIUM|HIGH
        "violations": data.get("violations", []),
        "recommendations": data.get("recommendations", []),
        "citations": data.get("citations", []),
    }
    return result